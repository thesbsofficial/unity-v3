<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🚨 SBS Debug Console</title>
    <style>
        body {
            background: #000;
            color: #0f0;
            font-family: 'Courier New', monospace;
            padding: 20px;
            margin: 0;
        }
        .console {
            background: #111;
            border: 1px solid #0f0;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            max-height: 300px;
            overflow-y: auto;
        }
        .button {
            background: #0f0;
            color: #000;
            border: none;
            padding: 10px 20px;
            margin: 5px;
            border-radius: 3px;
            cursor: pointer;
            font-family: inherit;
        }
        .error { color: #f00; }
        .success { color: #0f0; }
        .info { color: #00f; }
        .loading {
            animation: spin 1s linear infinite;
            display: inline-block;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
    <script src="/scripts/error-logger.js"></script>
</head>
<body>
    <h1>🚨 SBS Unity Debug Console</h1>
    
    <div class="console" id="output">
        <div class="success">✅ Debug console loaded</div>
        <div class="info">🔍 Initializing diagnostics...</div>
    </div>

    <div>
        <button class="button" onclick="runFullDiagnostic()">🔍 Full Diagnostic</button>
        <button class="button" onclick="testNavigation()">🧭 Test Navigation</button>
        <button class="button" onclick="testAPI()">🔌 Test API</button>
        <button class="button" onclick="checkNetwork()">🌐 Network Check</button>
        <button class="button" onclick="clearOutput()">🗑️ Clear</button>
        <button class="button" onclick="goToShop()">🛍️ Go to Shop</button>
    </div>

    <script>
        const output = document.getElementById('output');

        function log(message, type = 'info') {
            const div = document.createElement('div');
            div.className = type;
            div.innerHTML = `[${new Date().toLocaleTimeString()}] ${message}`;
            output.appendChild(div);
            output.scrollTop = output.scrollHeight;
        }

        function clearOutput() {
            output.innerHTML = '';
        }

        async function runFullDiagnostic() {
            log('🚀 Starting full diagnostic...', 'info');
            
            // First check if we can fetch from same origin
            log('🔍 Testing same-origin fetch capability...', 'info');
            try {
                const testResponse = await fetch(window.location.href, { 
                    method: 'HEAD',
                    cache: 'no-cache'
                });
                log(`✅ Same-origin fetch OK (${testResponse.status})`, 'success');
            } catch (error) {
                log(`❌ Same-origin fetch BLOCKED: ${error.message}`, 'error');
                log('🔧 This indicates CSP/CORS issues blocking navigation!', 'error');
            }
            
            // Check basic page elements
            log('📋 Checking page structure...', 'info');
            const checks = [
                { selector: 'head', name: 'Head element' },
                { selector: 'body', name: 'Body element' },
                { selector: 'nav', name: 'Navigation' },
                { selector: '.header', name: 'Header' },
                { selector: '.nav', name: 'Nav class' },
                { selector: 'script', name: 'Scripts' }
            ];

            checks.forEach(check => {
                const element = document.querySelector(check.selector);
                if (element) {
                    log(`✅ ${check.name} found`, 'success');
                } else {
                    log(`❌ ${check.name} MISSING`, 'error');
                }
            });

            // Check JavaScript environment
            log('🔍 Checking JavaScript environment...', 'info');
            const jsChecks = {
                'jQuery': typeof jQuery !== 'undefined',
                'fetch': typeof fetch !== 'undefined',
                'localStorage': typeof Storage !== 'undefined',
                'console': typeof console !== 'undefined',
                'SBS Logger': typeof window.sbsLogger !== 'undefined'
            };

            Object.entries(jsChecks).forEach(([name, available]) => {
                if (available) {
                    log(`✅ ${name} available`, 'success');
                } else {
                    log(`❌ ${name} NOT available`, 'error');
                }
            });

            // Check network connectivity
            log('🌐 Testing network connectivity...', 'info');
            try {
                const response = await fetch(window.location.origin, { method: 'HEAD' });
                log(`✅ Network OK (${response.status})`, 'success');
            } catch (error) {
                log(`❌ Network error: ${error.message}`, 'error');
            }

            log('✅ Diagnostic complete!', 'success');
        }

        function testNavigation() {
            log('🧭 Testing navigation links...', 'info');
            
            const testUrls = [
                '/shop',
                '/login', 
                '/sell',
                '/dashboard',
                '/register'
            ];

            testUrls.forEach(async (url) => {
                try {
                    log(`🔍 Testing ${url}...`, 'info');
                    const response = await fetch(url, { method: 'HEAD' });
                    if (response.ok) {
                        log(`✅ ${url} responds (${response.status})`, 'success');
                    } else {
                        log(`❌ ${url} error (${response.status})`, 'error');
                    }
                } catch (error) {
                    log(`❌ ${url} failed: ${error.message}`, 'error');
                }
            });
        }

        async function testAPI() {
            log('🔌 Testing API endpoints...', 'info');
            
            const apiTests = [
                '/api/products',
                '/api/auth/status',
                '/api/health'
            ];

            for (const endpoint of apiTests) {
                try {
                    log(`🔍 Testing ${endpoint}...`, 'info');
                    const response = await fetch(endpoint);
                    const data = await response.text();
                    
                    if (response.ok) {
                        log(`✅ ${endpoint} OK (${response.status})`, 'success');
                        log(`📄 Response: ${data.substring(0, 100)}...`, 'info');
                    } else {
                        log(`❌ ${endpoint} error (${response.status}): ${data}`, 'error');
                    }
                } catch (error) {
                    log(`❌ ${endpoint} failed: ${error.message}`, 'error');
                }
            }
        }

        async function checkNetwork() {
            log('🌐 Running network diagnostics...', 'info');
            
            // Check DNS resolution
            try {
                const start = performance.now();
                await fetch('https://thesbsofficial.com', { method: 'HEAD' });
                const end = performance.now();
                log(`✅ DNS resolution OK (${Math.round(end - start)}ms)`, 'success');
            } catch (error) {
                log(`❌ DNS/Connection error: ${error.message}`, 'error');
            }

            // Check CDN
            try {
                const response = await fetch('/favicon.ico', { method: 'HEAD' });
                const server = response.headers.get('server') || 'unknown';
                log(`✅ CDN Server: ${server}`, 'info');
            } catch (error) {
                log(`❌ CDN check failed: ${error.message}`, 'error');
            }

            // Check headers
            try {
                const response = await fetch(window.location.href, { method: 'HEAD' });
                log('📋 Response Headers:', 'info');
                for (const [key, value] of response.headers.entries()) {
                    log(`   ${key}: ${value}`, 'info');
                }
            } catch (error) {
                log(`❌ Headers check failed: ${error.message}`, 'error');
            }
        }

        function goToShop() {
            log('🛍️ Navigating to shop...', 'info');
            window.location.href = '/shop';
        }

        // Auto-run basic diagnostic on load
        setTimeout(() => {
            log('🎬 Auto-running basic checks...', 'info');
            runFullDiagnostic();
        }, 1000);
    </script>
</body>
</html>