<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Browser - SBS Unity Admin</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            line-height: 1.6;
        }

        /* Header */
        .admin-header {
            background: #1a1a1a;
            border-bottom: 1px solid #333;
            padding: 0 20px;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1600px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            height: 60px;
        }

        .logo {
            font-size: 18px;
            font-weight: 600;
            color: #ffd700;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .btn-back {
            background: #2a2a2a;
            color: #fff;
            border: 1px solid #444;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .btn-back:hover {
            background: #333;
        }

        /* Main Container */
        .container {
            max-width: 1600px;
            margin: 0 auto;
            padding: 30px 20px;
        }

        /* Page Header */
        .page-header {
            margin-bottom: 30px;
        }

        .page-title {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 8px;
        }

        .page-subtitle {
            color: #999;
            font-size: 16px;
        }

        /* Filters Bar */
        .filters-bar {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            align-items: center;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .filter-label {
            font-size: 12px;
            color: #999;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .filter-input,
        .filter-select {
            background: #0a0a0a;
            border: 1px solid #444;
            color: #fff;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 14px;
            min-width: 150px;
        }

        .filter-input:focus,
        .filter-select:focus {
            outline: none;
            border-color: #ffd700;
        }

        .search-box {
            flex: 1;
            min-width: 250px;
        }

        .search-input {
            width: 100%;
            background: #0a0a0a;
            border: 1px solid #444;
            color: #fff;
            padding: 10px 15px;
            border-radius: 6px;
            font-size: 14px;
        }

        .search-input::placeholder {
            color: #666;
        }

        .btn-filter {
            background: #ffd700;
            color: #000;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            margin-top: auto;
        }

        .btn-filter:hover {
            background: #ffed4e;
        }

        .btn-clear {
            background: transparent;
            color: #999;
            border: 1px solid #444;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            margin-top: auto;
        }

        .btn-clear:hover {
            background: #2a2a2a;
            color: #fff;
        }

        /* Stats Bar */
        .stats-bar {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            padding: 15px 20px;
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 8px;
        }

        .stat-item {
            display: flex;
            flex-direction: column;
        }

        .stat-label {
            font-size: 12px;
            color: #999;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stat-value {
            font-size: 24px;
            font-weight: 700;
            color: #ffd700;
        }

        /* Inventory Grid */
        .inventory-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .item-card {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.2s;
        }

        .item-card:hover {
            border-color: #ffd700;
            transform: translateY(-2px);
        }

        .item-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            background: #0a0a0a;
        }

        .item-info {
            padding: 15px;
        }

        .item-category {
            font-size: 11px;
            color: #ffd700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 5px;
        }

        .item-description {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 8px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .item-meta {
            display: flex;
            gap: 10px;
            font-size: 12px;
            color: #999;
        }

        .item-size {
            background: #2a2a2a;
            padding: 4px 8px;
            border-radius: 4px;
        }

        .item-batch {
            background: #2a2a2a;
            padding: 4px 8px;
            border-radius: 4px;
        }

        /* Loading State */
        .loading {
            text-align: center;
            padding: 60px 20px;
            color: #999;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #333;
            border-top-color: #ffd700;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #999;
        }

        .empty-icon {
            font-size: 48px;
            margin-bottom: 15px;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 30px;
        }

        .page-btn {
            background: #1a1a1a;
            border: 1px solid #444;
            color: #fff;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
        }

        .page-btn:hover {
            background: #2a2a2a;
            border-color: #ffd700;
        }

        .page-btn.active {
            background: #ffd700;
            color: #000;
            border-color: #ffd700;
        }

        .page-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
</head>

<body>
    <!-- Header -->
    <header class="admin-header">
        <div class="header-content">
            <div class="logo">SBS UNITY - Inventory</div>
            <div class="user-info">
                <span id="userName">@admin</span>
                <a href="/admin/" class="btn-back">‚Üê Back to Dashboard</a>
            </div>
        </div>
    </header>

    <!-- Main Container -->
    <div class="container">
        <!-- Page Header -->
        <div class="page-header">
            <h1 class="page-title">Inventory Browser</h1>
            <p class="page-subtitle">Browse and manage your product inventory</p>
        </div>

        <!-- Filters Bar -->
        <div class="filters-bar">
            <div class="filter-group">
                <label class="filter-label">Category</label>
                <select id="filterCategory" class="filter-select">
                    <option value="">All Categories</option>
                    <option value="BN-SHOES">BN-SHOES</option>
                    <option value="BN-TOPS">BN-TOPS</option>
                    <option value="USED-SHOES">USED-SHOES</option>
                    <option value="USED-TOPS">USED-TOPS</option>
                </select>
            </div>

            <div class="filter-group">
                <label class="filter-label">Size</label>
                <select id="filterSize" class="filter-select">
                    <option value="">All Sizes</option>
                    <option value="UK-6">UK-6</option>
                    <option value="UK-7">UK-7</option>
                    <option value="UK-8">UK-8</option>
                    <option value="UK-9">UK-9</option>
                    <option value="UK-10">UK-10</option>
                    <option value="UK-11">UK-11</option>
                    <option value="S">S</option>
                    <option value="M">M</option>
                    <option value="L">L</option>
                    <option value="XL">XL</option>
                </select>
            </div>

            <div class="filter-group">
                <label class="filter-label">Batch</label>
                <select id="filterBatch" class="filter-select">
                    <option value="">All Batches</option>
                    <!-- Populated dynamically -->
                </select>
            </div>

            <div class="filter-group search-box">
                <label class="filter-label">Search</label>
                <input type="text" id="searchInput" class="search-input" placeholder="Search by filename or description...">
            </div>

            <button class="btn-filter" onclick="applyFilters()">Apply Filters</button>
            <button class="btn-clear" onclick="clearFilters()">Clear</button>
        </div>

        <!-- Stats Bar -->
        <div class="stats-bar">
            <div class="stat-item">
                <span class="stat-label">Total Items</span>
                <span class="stat-value" id="statTotal">-</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Showing</span>
                <span class="stat-value" id="statShowing">-</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Batches</span>
                <span class="stat-value" id="statBatches">-</span>
            </div>
        </div>

        <!-- Loading State -->
        <div id="loadingState" class="loading">
            <div class="loading-spinner"></div>
            <p>Loading inventory...</p>
        </div>

        <!-- Inventory Grid -->
        <div id="inventoryGrid" class="inventory-grid" style="display: none;">
            <!-- Items populated by JavaScript -->
        </div>

        <!-- Empty State -->
        <div id="emptyState" class="empty-state" style="display: none;">
            <div class="empty-icon">üì¶</div>
            <h3>No Items Found</h3>
            <p>Try adjusting your filters or search query.</p>
        </div>

        <!-- Pagination -->
        <div id="pagination" class="pagination" style="display: none;">
            <!-- Pagination populated by JavaScript -->
        </div>
    </div>

    <script>
        // State
        let inventory = [];
        let filteredInventory = [];
        let currentPage = 1;
        const itemsPerPage = 24;

        // Initialize
        async function init() {
            await loadInventory();
            populateBatchFilter();
            renderInventory();
        }

        // Load Inventory (Mock Data for now - replace with API call)
        async function loadInventory() {
            try {
                // TODO: Replace with actual API call
                // const response = await fetch('/api/admin/inventory');
                // const data = await response.json();
                // inventory = data.items;

                // Mock data for testing
                inventory = generateMockData();
                filteredInventory = [...inventory];

                updateStats();
                showGrid();
            } catch (error) {
                console.error('Failed to load inventory:', error);
                showEmpty();
            }
        }

        // Generate Mock Data
        function generateMockData() {
            const categories = ['BN-SHOES', 'BN-TOPS', 'USED-SHOES', 'USED-TOPS'];
            const sizes = ['UK-6', 'UK-7', 'UK-8', 'UK-9', 'UK-10', 'S', 'M', 'L', 'XL'];
            const brands = ['Nike', 'Adidas', 'Supreme', 'Palace', 'Stone Island'];
            const items = [];

            for (let i = 1; i <= 48; i++) {
                const category = categories[Math.floor(Math.random() * categories.length)];
                const size = sizes[Math.floor(Math.random() * sizes.length)];
                const brand = brands[Math.floor(Math.random() * brands.length)];
                const batchNum = String(Math.floor(Math.random() * 5) + 1).padStart(2, '0');

                items.push({
                    id: `item-${i}`,
                    cloudflareId: `cf-${i}`,
                    filename: `CAT-${category}-SIZE-${size}-DESC-${brand}-BATCH-B${batchNum}-ITEM-${String(i).padStart(3, '0')}.jpeg`,
                    category: category,
                    size: size,
                    description: `${brand} ${category.includes('SHOES') ? 'Shoes' : 'Top'}`,
                    batch: `B${batchNum}`,
                    imageUrl: `https://imagedelivery.net/7B8CAeDtA5h1f1Dyh_X-hg/example/w=360,h=480`
                });
            }

            return items;
        }

        // Populate Batch Filter
        function populateBatchFilter() {
            const batches = [...new Set(inventory.map(item => item.batch))].sort();
            const select = document.getElementById('filterBatch');

            batches.forEach(batch => {
                const option = document.createElement('option');
                option.value = batch;
                option.textContent = batch;
                select.appendChild(option);
            });
        }

        // Apply Filters
        function applyFilters() {
            const category = document.getElementById('filterCategory').value;
            const size = document.getElementById('filterSize').value;
            const batch = document.getElementById('filterBatch').value;
            const search = document.getElementById('searchInput').value.toLowerCase();

            filteredInventory = inventory.filter(item => {
                if (category && item.category !== category) return false;
                if (size && item.size !== size) return false;
                if (batch && item.batch !== batch) return false;
                if (search && !item.filename.toLowerCase().includes(search) &&
                    !item.description.toLowerCase().includes(search)) return false;
                return true;
            });

            currentPage = 1;
            updateStats();
            renderInventory();
        }

        // Clear Filters
        function clearFilters() {
            document.getElementById('filterCategory').value = '';
            document.getElementById('filterSize').value = '';
            document.getElementById('filterBatch').value = '';
            document.getElementById('searchInput').value = '';
            applyFilters();
        }

        // Update Stats
        function updateStats() {
            document.getElementById('statTotal').textContent = inventory.length;
            document.getElementById('statShowing').textContent = filteredInventory.length;
            const uniqueBatches = new Set(filteredInventory.map(item => item.batch));
            document.getElementById('statBatches').textContent = uniqueBatches.size;
        }

        // Render Inventory
        function renderInventory() {
            const grid = document.getElementById('inventoryGrid');
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            const pageItems = filteredInventory.slice(start, end);

            if (pageItems.length === 0) {
                showEmpty();
                return;
            }

            grid.innerHTML = pageItems.map(item => `
                <div class="item-card" onclick="viewItem('${item.id}')">
                    <img class="item-image" 
                         src="${item.imageUrl}" 
                         alt="${item.description}"
                         onerror="this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'280\\' height=\\'200\\' viewBox=\\'0 0 280 200\\'%3E%3Crect fill=\\'%230a0a0a\\' width=\\'280\\' height=\\'200\\'/%3E%3Ctext fill=\\'%23666\\' x=\\'50%25\\' y=\\'50%25\\' text-anchor=\\'middle\\' dy=\\'.3em\\'%3ENo Image%3C/text%3E%3C/svg%3E'">
                    <div class="item-info">
                        <div class="item-category">${item.category}</div>
                        <div class="item-description">${item.description}</div>
                        <div class="item-meta">
                            <span class="item-size">${item.size}</span>
                            <span class="item-batch">${item.batch}</span>
                        </div>
                    </div>
                </div>
            `).join('');

            showGrid();
            renderPagination();
        }

        // Render Pagination
        function renderPagination() {
            const pagination = document.getElementById('pagination');
            const totalPages = Math.ceil(filteredInventory.length / itemsPerPage);

            if (totalPages <= 1) {
                pagination.style.display = 'none';
                return;
            }

            let html = `
                <button class="page-btn" onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>
                    ‚Üê Prev
                </button>
            `;

            for (let i = 1; i <= totalPages; i++) {
                if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
                    html += `
                        <button class="page-btn ${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">
                            ${i}
                        </button>
                    `;
                } else if (i === currentPage - 3 || i === currentPage + 3) {
                    html += `<span style="color: #666;">...</span>`;
                }
            }

            html += `
                <button class="page-btn" onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>
                    Next ‚Üí
                </button>
            `;

            pagination.innerHTML = html;
            pagination.style.display = 'flex';
        }

        // Change Page
        function changePage(page) {
            const totalPages = Math.ceil(filteredInventory.length / itemsPerPage);
            if (page < 1 || page > totalPages) return;

            currentPage = page;
            renderInventory();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // View Item Detail (placeholder)
        function viewItem(itemId) {
            const item = inventory.find(i => i.id === itemId);
            if (item) {
                alert(`Item Details:\n\nFilename: ${item.filename}\nCategory: ${item.category}\nSize: ${item.size}\nBatch: ${item.batch}\n\n(Detail drawer coming soon!)`);
            }
        }

        // Show/Hide States
        function showLoading() {
            document.getElementById('loadingState').style.display = 'block';
            document.getElementById('inventoryGrid').style.display = 'none';
            document.getElementById('emptyState').style.display = 'none';
            document.getElementById('pagination').style.display = 'none';
        }

        function showGrid() {
            document.getElementById('loadingState').style.display = 'none';
            document.getElementById('inventoryGrid').style.display = 'grid';
            document.getElementById('emptyState').style.display = 'none';
        }

        function showEmpty() {
            document.getElementById('loadingState').style.display = 'none';
            document.getElementById('inventoryGrid').style.display = 'none';
            document.getElementById('emptyState').style.display = 'block';
            document.getElementById('pagination').style.display = 'none';
        }

        // Search on Enter
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    applyFilters();
                }
            });

            init();
        });
    </script>
</body>

</html>
